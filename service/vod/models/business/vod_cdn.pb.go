// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.4
// source: volcengine/vod/business/vod_cdn.proto

package business

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VodDomainSourceStationType int32

const (
	VodDomainSourceStationType_UndefinedVodDomainSourceStationType  VodDomainSourceStationType = 0 // 未定义的源站类型
	VodDomainSourceStationType_VodVodDomainSourceStationType        VodDomainSourceStationType = 1 // 点播源站
	VodDomainSourceStationType_ThirdPartyVodDomainSourceStationType VodDomainSourceStationType = 2 // 第三方源站
)

// Enum value maps for VodDomainSourceStationType.
var (
	VodDomainSourceStationType_name = map[int32]string{
		0: "UndefinedVodDomainSourceStationType",
		1: "VodVodDomainSourceStationType",
		2: "ThirdPartyVodDomainSourceStationType",
	}
	VodDomainSourceStationType_value = map[string]int32{
		"UndefinedVodDomainSourceStationType":  0,
		"VodVodDomainSourceStationType":        1,
		"ThirdPartyVodDomainSourceStationType": 2,
	}
)

func (x VodDomainSourceStationType) Enum() *VodDomainSourceStationType {
	p := new(VodDomainSourceStationType)
	*p = x
	return p
}

func (x VodDomainSourceStationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VodDomainSourceStationType) Descriptor() protoreflect.EnumDescriptor {
	return file_volcengine_vod_business_vod_cdn_proto_enumTypes[0].Descriptor()
}

func (VodDomainSourceStationType) Type() protoreflect.EnumType {
	return &file_volcengine_vod_business_vod_cdn_proto_enumTypes[0]
}

func (x VodDomainSourceStationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VodDomainSourceStationType.Descriptor instead.
func (VodDomainSourceStationType) EnumDescriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{0}
}

type VodDomainSourceStationAddressType int32

const (
	VodDomainSourceStationAddressType_UndefinedVodDomainSourceStationAddressType VodDomainSourceStationAddressType = 0 // 未定义的源站地址类型
	VodDomainSourceStationAddressType_DomainVodDomainSourceStationAddressType    VodDomainSourceStationAddressType = 1 // 域名类型
	VodDomainSourceStationAddressType_IPVodDomainSourceStationAddressType        VodDomainSourceStationAddressType = 2 // IP类型
)

// Enum value maps for VodDomainSourceStationAddressType.
var (
	VodDomainSourceStationAddressType_name = map[int32]string{
		0: "UndefinedVodDomainSourceStationAddressType",
		1: "DomainVodDomainSourceStationAddressType",
		2: "IPVodDomainSourceStationAddressType",
	}
	VodDomainSourceStationAddressType_value = map[string]int32{
		"UndefinedVodDomainSourceStationAddressType": 0,
		"DomainVodDomainSourceStationAddressType":    1,
		"IPVodDomainSourceStationAddressType":        2,
	}
)

func (x VodDomainSourceStationAddressType) Enum() *VodDomainSourceStationAddressType {
	p := new(VodDomainSourceStationAddressType)
	*p = x
	return p
}

func (x VodDomainSourceStationAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VodDomainSourceStationAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_volcengine_vod_business_vod_cdn_proto_enumTypes[1].Descriptor()
}

func (VodDomainSourceStationAddressType) Type() protoreflect.EnumType {
	return &file_volcengine_vod_business_vod_cdn_proto_enumTypes[1]
}

func (x VodDomainSourceStationAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VodDomainSourceStationAddressType.Descriptor instead.
func (VodDomainSourceStationAddressType) EnumDescriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{1}
}

type VodDomainConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName         string                  `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`                 // 空间名称
	PlayInstanceInfo  *VodDomainInstanceInfos `protobuf:"bytes,2,opt,name=PlayInstanceInfo,proto3" json:"PlayInstanceInfo,omitempty"`   // 播放分发加速配置
	ImageInstanceInfo *VodDomainInstanceInfos `protobuf:"bytes,3,opt,name=ImageInstanceInfo,proto3" json:"ImageInstanceInfo,omitempty"` // 图片分发加速配置
	DefaultPlayDomain string                  `protobuf:"bytes,4,opt,name=DefaultPlayDomain,proto3" json:"DefaultPlayDomain,omitempty"` //默认播放域名
	Total             int64                   `protobuf:"varint,5,opt,name=Total,proto3" json:"Total,omitempty"`                        //符合要求的域名总数
	Offset            int64                   `protobuf:"varint,6,opt,name=Offset,proto3" json:"Offset,omitempty"`                      //已显示多少条域名
}

func (x *VodDomainConfigInfo) Reset() {
	*x = VodDomainConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDomainConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDomainConfigInfo) ProtoMessage() {}

func (x *VodDomainConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDomainConfigInfo.ProtoReflect.Descriptor instead.
func (*VodDomainConfigInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{0}
}

func (x *VodDomainConfigInfo) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodDomainConfigInfo) GetPlayInstanceInfo() *VodDomainInstanceInfos {
	if x != nil {
		return x.PlayInstanceInfo
	}
	return nil
}

func (x *VodDomainConfigInfo) GetImageInstanceInfo() *VodDomainInstanceInfos {
	if x != nil {
		return x.ImageInstanceInfo
	}
	return nil
}

func (x *VodDomainConfigInfo) GetDefaultPlayDomain() string {
	if x != nil {
		return x.DefaultPlayDomain
	}
	return ""
}

func (x *VodDomainConfigInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VodDomainConfigInfo) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type VodDomainInstanceInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByteInstances  []*VodDomainInstanceInfo `protobuf:"bytes,1,rep,name=ByteInstances,proto3" json:"ByteInstances,omitempty"`   // 点播源站实例列表
	OtherInstances []*VodDomainInstanceInfo `protobuf:"bytes,2,rep,name=OtherInstances,proto3" json:"OtherInstances,omitempty"` // 第三方源站实力列表
}

func (x *VodDomainInstanceInfos) Reset() {
	*x = VodDomainInstanceInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDomainInstanceInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDomainInstanceInfos) ProtoMessage() {}

func (x *VodDomainInstanceInfos) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDomainInstanceInfos.ProtoReflect.Descriptor instead.
func (*VodDomainInstanceInfos) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{1}
}

func (x *VodDomainInstanceInfos) GetByteInstances() []*VodDomainInstanceInfo {
	if x != nil {
		return x.ByteInstances
	}
	return nil
}

func (x *VodDomainInstanceInfos) GetOtherInstances() []*VodDomainInstanceInfo {
	if x != nil {
		return x.OtherInstances
	}
	return nil
}

type VodDomainInstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domains []*VodDomainoInfo `protobuf:"bytes,2,rep,name=Domains,proto3" json:"Domains,omitempty"` //域名列表
}

func (x *VodDomainInstanceInfo) Reset() {
	*x = VodDomainInstanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDomainInstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDomainInstanceInfo) ProtoMessage() {}

func (x *VodDomainInstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDomainInstanceInfo.ProtoReflect.Descriptor instead.
func (*VodDomainInstanceInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{2}
}

func (x *VodDomainInstanceInfo) GetDomains() []*VodDomainoInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

type VodDomainoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string                    `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`             //域名
	Cname        string                    `protobuf:"bytes,2,opt,name=Cname,proto3" json:"Cname,omitempty"`               // cname域名
	ConfigStatus string                    `protobuf:"bytes,3,opt,name=ConfigStatus,proto3" json:"ConfigStatus,omitempty"` //配置状态
	CnameStatus  string                    `protobuf:"bytes,4,opt,name=CnameStatus,proto3" json:"CnameStatus,omitempty"`   //解析状态
	Status       string                    `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`             //是否开启点播调度
	Certificate  *VodDomainCertificateInfo `protobuf:"bytes,6,opt,name=Certificate,proto3" json:"Certificate,omitempty"`   //证书
	CreateTime   string                    `protobuf:"bytes,7,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`     //创建时间
	UpdateTime   string                    `protobuf:"bytes,8,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`     //更新时间
	Region       string                    `protobuf:"bytes,9,opt,name=Region,proto3" json:"Region,omitempty"`             //加速区域，cn:国内,overseas:海外，global:全球
	Sources      []*VodDomainSourceInfo    `protobuf:"bytes,10,rep,name=Sources,proto3" json:"Sources,omitempty"`          // 源站信息
	LockStatus   string                    `protobuf:"bytes,11,opt,name=LockStatus,proto3" json:"LockStatus,omitempty"`    //是否锁定，可否配置
	CdnStatus    string                    `protobuf:"bytes,12,opt,name=CdnStatus,proto3" json:"CdnStatus,omitempty"`      //在CDN侧是否启用停用
}

func (x *VodDomainoInfo) Reset() {
	*x = VodDomainoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDomainoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDomainoInfo) ProtoMessage() {}

func (x *VodDomainoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDomainoInfo.ProtoReflect.Descriptor instead.
func (*VodDomainoInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{3}
}

func (x *VodDomainoInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodDomainoInfo) GetCname() string {
	if x != nil {
		return x.Cname
	}
	return ""
}

func (x *VodDomainoInfo) GetConfigStatus() string {
	if x != nil {
		return x.ConfigStatus
	}
	return ""
}

func (x *VodDomainoInfo) GetCnameStatus() string {
	if x != nil {
		return x.CnameStatus
	}
	return ""
}

func (x *VodDomainoInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodDomainoInfo) GetCertificate() *VodDomainCertificateInfo {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *VodDomainoInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *VodDomainoInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *VodDomainoInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *VodDomainoInfo) GetSources() []*VodDomainSourceInfo {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *VodDomainoInfo) GetLockStatus() string {
	if x != nil {
		return x.LockStatus
	}
	return ""
}

func (x *VodDomainoInfo) GetCdnStatus() string {
	if x != nil {
		return x.CdnStatus
	}
	return ""
}

type VodDomainCertificateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateId                  string `protobuf:"bytes,1,opt,name=CertificateId,proto3" json:"CertificateId,omitempty"`                                   //证书ID
	CertificateName                string `protobuf:"bytes,2,opt,name=CertificateName,proto3" json:"CertificateName,omitempty"`                               //证书名
	CertificatePub                 string `protobuf:"bytes,3,opt,name=CertificatePub,proto3" json:"CertificatePub,omitempty"`                                 //证书内容
	CertificatePri                 string `protobuf:"bytes,4,opt,name=CertificatePri,proto3" json:"CertificatePri,omitempty"`                                 //私钥
	HttpsStatus                    string `protobuf:"bytes,5,opt,name=HttpsStatus,proto3" json:"HttpsStatus,omitempty"`                                       // Http开启状态
	ExpiredAt                      string `protobuf:"bytes,6,opt,name=ExpiredAt,proto3" json:"ExpiredAt,omitempty"`                                           // 证书过期时间，格式为"yyyy-MM-dd HH:mm:ss"
	CertificateCenterCertificateId string `protobuf:"bytes,7,opt,name=CertificateCenterCertificateId,proto3" json:"CertificateCenterCertificateId,omitempty"` //证书中心证书ID
}

func (x *VodDomainCertificateInfo) Reset() {
	*x = VodDomainCertificateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDomainCertificateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDomainCertificateInfo) ProtoMessage() {}

func (x *VodDomainCertificateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDomainCertificateInfo.ProtoReflect.Descriptor instead.
func (*VodDomainCertificateInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{4}
}

func (x *VodDomainCertificateInfo) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *VodDomainCertificateInfo) GetCertificateName() string {
	if x != nil {
		return x.CertificateName
	}
	return ""
}

func (x *VodDomainCertificateInfo) GetCertificatePub() string {
	if x != nil {
		return x.CertificatePub
	}
	return ""
}

func (x *VodDomainCertificateInfo) GetCertificatePri() string {
	if x != nil {
		return x.CertificatePri
	}
	return ""
}

func (x *VodDomainCertificateInfo) GetHttpsStatus() string {
	if x != nil {
		return x.HttpsStatus
	}
	return ""
}

func (x *VodDomainCertificateInfo) GetExpiredAt() string {
	if x != nil {
		return x.ExpiredAt
	}
	return ""
}

func (x *VodDomainCertificateInfo) GetCertificateCenterCertificateId() string {
	if x != nil {
		return x.CertificateCenterCertificateId
	}
	return ""
}

type VodCreateCdnTaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"` // 任务ID
}

func (x *VodCreateCdnTaskResult) Reset() {
	*x = VodCreateCdnTaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCreateCdnTaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCreateCdnTaskResult) ProtoMessage() {}

func (x *VodCreateCdnTaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCreateCdnTaskResult.ProtoReflect.Descriptor instead.
func (*VodCreateCdnTaskResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{5}
}

func (x *VodCreateCdnTaskResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type VodContentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId          string `protobuf:"bytes,1,opt,name=ItemId,proto3" json:"ItemId,omitempty"`                    //记录ID，可为空
	Url             string `protobuf:"bytes,2,opt,name=Url,proto3" json:"Url,omitempty"`                          //任务URL
	Status          string `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`                    //任务状态
	TaskType        string `protobuf:"bytes,4,opt,name=TaskType,proto3" json:"TaskType,omitempty"`                //任务类型
	CreateTimestamp int32  `protobuf:"varint,5,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"` //任务创建时间，单位：Unix秒级时间戳
	TaskId          string `protobuf:"bytes,6,opt,name=TaskId,proto3" json:"TaskId,omitempty"`                    //任务ID
	Message         string `protobuf:"bytes,7,opt,name=Message,proto3" json:"Message,omitempty"`                  //任务信息
}

func (x *VodContentInfo) Reset() {
	*x = VodContentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodContentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodContentInfo) ProtoMessage() {}

func (x *VodContentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodContentInfo.ProtoReflect.Descriptor instead.
func (*VodContentInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{6}
}

func (x *VodContentInfo) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *VodContentInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VodContentInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodContentInfo) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *VodContentInfo) GetCreateTimestamp() int32 {
	if x != nil {
		return x.CreateTimestamp
	}
	return 0
}

func (x *VodContentInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *VodContentInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type VodCdnTaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount   int32             `protobuf:"varint,1,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`    //结果总数
	PageNum      int32             `protobuf:"varint,2,opt,name=PageNum,proto3" json:"PageNum,omitempty"`          //页码
	PageSize     int32             `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`        //页面大小
	ContentInfos []*VodContentInfo `protobuf:"bytes,4,rep,name=ContentInfos,proto3" json:"ContentInfos,omitempty"` //任务列表
}

func (x *VodCdnTaskResult) Reset() {
	*x = VodCdnTaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCdnTaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCdnTaskResult) ProtoMessage() {}

func (x *VodCdnTaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCdnTaskResult.ProtoReflect.Descriptor instead.
func (*VodCdnTaskResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{7}
}

func (x *VodCdnTaskResult) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *VodCdnTaskResult) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *VodCdnTaskResult) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *VodCdnTaskResult) GetContentInfos() []*VodContentInfo {
	if x != nil {
		return x.ContentInfos
	}
	return nil
}

type VodCdnAccessLogElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadUrl    string `protobuf:"bytes,1,opt,name=DownloadUrl,proto3" json:"DownloadUrl,omitempty"`        // 下载地址
	FileSize       int64  `protobuf:"varint,2,opt,name=FileSize,proto3" json:"FileSize,omitempty"`             // 文件大小，单位：bytes
	FileName       string `protobuf:"bytes,3,opt,name=FileName,proto3" json:"FileName,omitempty"`              // 日志文件名
	StartTimestamp int32  `protobuf:"varint,4,opt,name=StartTimestamp,proto3" json:"StartTimestamp,omitempty"` // 日志包起始时间，单位：Unix秒级时间戳
	EndTimestamp   int32  `protobuf:"varint,5,opt,name=EndTimestamp,proto3" json:"EndTimestamp,omitempty"`     // 日志包结束时间，单位：Unix秒级时间戳
}

func (x *VodCdnAccessLogElement) Reset() {
	*x = VodCdnAccessLogElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCdnAccessLogElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCdnAccessLogElement) ProtoMessage() {}

func (x *VodCdnAccessLogElement) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCdnAccessLogElement.ProtoReflect.Descriptor instead.
func (*VodCdnAccessLogElement) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{8}
}

func (x *VodCdnAccessLogElement) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *VodCdnAccessLogElement) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *VodCdnAccessLogElement) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VodCdnAccessLogElement) GetStartTimestamp() int32 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *VodCdnAccessLogElement) GetEndTimestamp() int32 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

type VodCdnAccessLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain  string                    `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`   // 域名
	LogList []*VodCdnAccessLogElement `protobuf:"bytes,2,rep,name=LogList,proto3" json:"LogList,omitempty"` // 日志列表
}

func (x *VodCdnAccessLogInfo) Reset() {
	*x = VodCdnAccessLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCdnAccessLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCdnAccessLogInfo) ProtoMessage() {}

func (x *VodCdnAccessLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCdnAccessLogInfo.ProtoReflect.Descriptor instead.
func (*VodCdnAccessLogInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{9}
}

func (x *VodCdnAccessLogInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodCdnAccessLogInfo) GetLogList() []*VodCdnAccessLogElement {
	if x != nil {
		return x.LogList
	}
	return nil
}

type VodListCdnAccessLogResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*VodCdnAccessLogInfo `protobuf:"bytes,1,rep,name=Logs,proto3" json:"Logs,omitempty"` // 日志列表
}

func (x *VodListCdnAccessLogResult) Reset() {
	*x = VodListCdnAccessLogResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnAccessLogResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnAccessLogResult) ProtoMessage() {}

func (x *VodListCdnAccessLogResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnAccessLogResult.ProtoReflect.Descriptor instead.
func (*VodListCdnAccessLogResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{10}
}

func (x *VodListCdnAccessLogResult) GetLogs() []*VodCdnAccessLogInfo {
	if x != nil {
		return x.Logs
	}
	return nil
}

type VodCdnTopAccessUrlElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`    // URL
	Pv   int64  `protobuf:"varint,2,opt,name=Pv,proto3" json:"Pv,omitempty"`     // 请求次数计数
	Flux int64  `protobuf:"varint,3,opt,name=Flux,proto3" json:"Flux,omitempty"` // 流量计数，单位：Byte
}

func (x *VodCdnTopAccessUrlElement) Reset() {
	*x = VodCdnTopAccessUrlElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCdnTopAccessUrlElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCdnTopAccessUrlElement) ProtoMessage() {}

func (x *VodCdnTopAccessUrlElement) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCdnTopAccessUrlElement.ProtoReflect.Descriptor instead.
func (*VodCdnTopAccessUrlElement) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{11}
}

func (x *VodCdnTopAccessUrlElement) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VodCdnTopAccessUrlElement) GetPv() int64 {
	if x != nil {
		return x.Pv
	}
	return 0
}

func (x *VodCdnTopAccessUrlElement) GetFlux() int64 {
	if x != nil {
		return x.Flux
	}
	return 0
}

type VodListCdnTopAccessUrlResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrlInfos []*VodCdnTopAccessUrlElement `protobuf:"bytes,1,rep,name=UrlInfos,proto3" json:"UrlInfos,omitempty"` // TopURL查询得到的数据明细以及全部域名的汇总值
}

func (x *VodListCdnTopAccessUrlResult) Reset() {
	*x = VodListCdnTopAccessUrlResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnTopAccessUrlResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnTopAccessUrlResult) ProtoMessage() {}

func (x *VodListCdnTopAccessUrlResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnTopAccessUrlResult.ProtoReflect.Descriptor instead.
func (*VodListCdnTopAccessUrlResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{12}
}

func (x *VodListCdnTopAccessUrlResult) GetUrlInfos() []*VodCdnTopAccessUrlElement {
	if x != nil {
		return x.UrlInfos
	}
	return nil
}

type VodCdnTopAccessElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemKey string  `protobuf:"bytes,1,opt,name=ItemKey,proto3" json:"ItemKey,omitempty"` // 搜索Item对应key
	Value   float64 `protobuf:"fixed64,2,opt,name=Value,proto3" json:"Value,omitempty"`   // 请求相应Item和Metric对应值
}

func (x *VodCdnTopAccessElement) Reset() {
	*x = VodCdnTopAccessElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCdnTopAccessElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCdnTopAccessElement) ProtoMessage() {}

func (x *VodCdnTopAccessElement) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCdnTopAccessElement.ProtoReflect.Descriptor instead.
func (*VodCdnTopAccessElement) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{13}
}

func (x *VodCdnTopAccessElement) GetItemKey() string {
	if x != nil {
		return x.ItemKey
	}
	return ""
}

func (x *VodCdnTopAccessElement) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type VodListCdnTopAccessResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemInfos []*VodCdnTopAccessElement `protobuf:"bytes,1,rep,name=ItemInfos,proto3" json:"ItemInfos,omitempty"` // 热点数据查询得到的数据明细以及全部域名的汇总值
}

func (x *VodListCdnTopAccessResult) Reset() {
	*x = VodListCdnTopAccessResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodListCdnTopAccessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodListCdnTopAccessResult) ProtoMessage() {}

func (x *VodListCdnTopAccessResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodListCdnTopAccessResult.ProtoReflect.Descriptor instead.
func (*VodListCdnTopAccessResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{14}
}

func (x *VodListCdnTopAccessResult) GetItemInfos() []*VodCdnTopAccessElement {
	if x != nil {
		return x.ItemInfos
	}
	return nil
}

type VodBandwidthData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      string  `protobuf:"bytes,1,opt,name=Time,proto3" json:"Time,omitempty"`             // 每个时间粒度的时间
	Bandwidth float64 `protobuf:"fixed64,2,opt,name=Bandwidth,proto3" json:"Bandwidth,omitempty"` // 带宽，单位为 bps
}

func (x *VodBandwidthData) Reset() {
	*x = VodBandwidthData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodBandwidthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodBandwidthData) ProtoMessage() {}

func (x *VodBandwidthData) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodBandwidthData.ProtoReflect.Descriptor instead.
func (*VodBandwidthData) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{15}
}

func (x *VodBandwidthData) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *VodBandwidthData) GetBandwidth() float64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

type VodDescribeVodDomainBandwidthDataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainList          []string            `protobuf:"bytes,1,rep,name=DomainList,proto3" json:"DomainList,omitempty"`                    // 域名列表
	DomainInSpaceList   []string            `protobuf:"bytes,2,rep,name=DomainInSpaceList,proto3" json:"DomainInSpaceList,omitempty"`      // 域名列表
	StartTime           string              `protobuf:"bytes,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`                      // 查询的起始时间
	EndTime             string              `protobuf:"bytes,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                          // 查询的结束时间
	Aggregation         int32               `protobuf:"varint,5,opt,name=Aggregation,proto3" json:"Aggregation,omitempty"`                 // 聚合的时间粒度
	BandwidthType       string              `protobuf:"bytes,6,opt,name=BandwidthType,proto3" json:"BandwidthType,omitempty"`              // 默认是CDN，支持CDN、ECDN、ALL
	Area                string              `protobuf:"bytes,7,opt,name=Area,proto3" json:"Area,omitempty"`                                // 区域
	RegionList          []string            `protobuf:"bytes,8,rep,name=RegionList,proto3" json:"RegionList,omitempty"`                    // 空间所属区域
	PeakBandwidth       float64             `protobuf:"fixed64,9,opt,name=PeakBandwidth,proto3" json:"PeakBandwidth,omitempty"`            // 带宽峰值，单位为bps
	PeakBandwidthTime   string              `protobuf:"bytes,10,opt,name=PeakBandwidthTime,proto3" json:"PeakBandwidthTime,omitempty"`     // 带宽峰值出现的时间
	Peak95Bandwidth     float64             `protobuf:"fixed64,11,opt,name=Peak95Bandwidth,proto3" json:"Peak95Bandwidth,omitempty"`       // 带宽95峰值，单位为bps
	Peak95BandwidthTime string              `protobuf:"bytes,12,opt,name=Peak95BandwidthTime,proto3" json:"Peak95BandwidthTime,omitempty"` // 带宽95峰值出现的时间
	BandwidthDataList   []*VodBandwidthData `protobuf:"bytes,13,rep,name=BandwidthDataList,proto3" json:"BandwidthDataList,omitempty"`     // 所有时间粒度数据
}

func (x *VodDescribeVodDomainBandwidthDataResult) Reset() {
	*x = VodDescribeVodDomainBandwidthDataResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDescribeVodDomainBandwidthDataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDescribeVodDomainBandwidthDataResult) ProtoMessage() {}

func (x *VodDescribeVodDomainBandwidthDataResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDescribeVodDomainBandwidthDataResult.ProtoReflect.Descriptor instead.
func (*VodDescribeVodDomainBandwidthDataResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{16}
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetDomainList() []string {
	if x != nil {
		return x.DomainList
	}
	return nil
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetDomainInSpaceList() []string {
	if x != nil {
		return x.DomainInSpaceList
	}
	return nil
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetAggregation() int32 {
	if x != nil {
		return x.Aggregation
	}
	return 0
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetBandwidthType() string {
	if x != nil {
		return x.BandwidthType
	}
	return ""
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetRegionList() []string {
	if x != nil {
		return x.RegionList
	}
	return nil
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetPeakBandwidth() float64 {
	if x != nil {
		return x.PeakBandwidth
	}
	return 0
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetPeakBandwidthTime() string {
	if x != nil {
		return x.PeakBandwidthTime
	}
	return ""
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetPeak95Bandwidth() float64 {
	if x != nil {
		return x.Peak95Bandwidth
	}
	return 0
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetPeak95BandwidthTime() string {
	if x != nil {
		return x.Peak95BandwidthTime
	}
	return ""
}

func (x *VodDescribeVodDomainBandwidthDataResult) GetBandwidthDataList() []*VodBandwidthData {
	if x != nil {
		return x.BandwidthDataList
	}
	return nil
}

type VodCdnStatisticsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string      `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Metric        string      `protobuf:"bytes,2,opt,name=Metric,proto3" json:"Metric,omitempty"`
	DataType      string      `protobuf:"bytes,3,opt,name=DataType,proto3" json:"DataType,omitempty"`
	Points        []*VodPoint `protobuf:"bytes,4,rep,name=Points,proto3" json:"Points,omitempty"`
	Region        string      `protobuf:"bytes,5,opt,name=Region,proto3" json:"Region,omitempty"`
	Isp           string      `protobuf:"bytes,6,opt,name=Isp,proto3" json:"Isp,omitempty"`
	BillingRegion string      `protobuf:"bytes,7,opt,name=BillingRegion,proto3" json:"BillingRegion,omitempty"`
}

func (x *VodCdnStatisticsData) Reset() {
	*x = VodCdnStatisticsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCdnStatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCdnStatisticsData) ProtoMessage() {}

func (x *VodCdnStatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCdnStatisticsData.ProtoReflect.Descriptor instead.
func (*VodCdnStatisticsData) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{17}
}

func (x *VodCdnStatisticsData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VodCdnStatisticsData) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *VodCdnStatisticsData) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *VodCdnStatisticsData) GetPoints() []*VodPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *VodCdnStatisticsData) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *VodCdnStatisticsData) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

func (x *VodCdnStatisticsData) GetBillingRegion() string {
	if x != nil {
		return x.BillingRegion
	}
	return ""
}

type VodCdnStatisticsCommonResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas               []*VodCdnStatisticsData `protobuf:"bytes,1,rep,name=Datas,proto3" json:"Datas,omitempty"`
	NoPermissionDomains []string                `protobuf:"bytes,2,rep,name=NoPermissionDomains,proto3" json:"NoPermissionDomains,omitempty"`
}

func (x *VodCdnStatisticsCommonResult) Reset() {
	*x = VodCdnStatisticsCommonResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCdnStatisticsCommonResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCdnStatisticsCommonResult) ProtoMessage() {}

func (x *VodCdnStatisticsCommonResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCdnStatisticsCommonResult.ProtoReflect.Descriptor instead.
func (*VodCdnStatisticsCommonResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{18}
}

func (x *VodCdnStatisticsCommonResult) GetDatas() []*VodCdnStatisticsData {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *VodCdnStatisticsCommonResult) GetNoPermissionDomains() []string {
	if x != nil {
		return x.NoPermissionDomains
	}
	return nil
}

type VodCdnIpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string `protobuf:"bytes,1,opt,name=Ip,proto3" json:"Ip,omitempty"`             // ip地址
	CdnIp    bool   `protobuf:"varint,2,opt,name=CdnIp,proto3" json:"CdnIp,omitempty"`      //是否是火山cdn的ip
	Location string `protobuf:"bytes,3,opt,name=Location,proto3" json:"Location,omitempty"` // IP所属地区,非火山cdn返回"-"
	Isp      string `protobuf:"bytes,4,opt,name=Isp,proto3" json:"Isp,omitempty"`           // IP所属运营商,非火山cdn返回"-"
}

func (x *VodCdnIpInfo) Reset() {
	*x = VodCdnIpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodCdnIpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodCdnIpInfo) ProtoMessage() {}

func (x *VodCdnIpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodCdnIpInfo.ProtoReflect.Descriptor instead.
func (*VodCdnIpInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{19}
}

func (x *VodCdnIpInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *VodCdnIpInfo) GetCdnIp() bool {
	if x != nil {
		return x.CdnIp
	}
	return false
}

func (x *VodCdnIpInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *VodCdnIpInfo) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

type VodDescribeIpInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*VodCdnIpInfo `protobuf:"bytes,1,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *VodDescribeIpInfoResult) Reset() {
	*x = VodDescribeIpInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDescribeIpInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDescribeIpInfoResult) ProtoMessage() {}

func (x *VodDescribeIpInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDescribeIpInfoResult.ProtoReflect.Descriptor instead.
func (*VodDescribeIpInfoResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{20}
}

func (x *VodDescribeIpInfoResult) GetInfos() []*VodCdnIpInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type VodTrafficData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    string  `protobuf:"bytes,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Traffic float64 `protobuf:"fixed64,2,opt,name=Traffic,proto3" json:"Traffic,omitempty"` // GB
}

func (x *VodTrafficData) Reset() {
	*x = VodTrafficData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodTrafficData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodTrafficData) ProtoMessage() {}

func (x *VodTrafficData) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodTrafficData.ProtoReflect.Descriptor instead.
func (*VodTrafficData) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{21}
}

func (x *VodTrafficData) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *VodTrafficData) GetTraffic() float64 {
	if x != nil {
		return x.Traffic
	}
	return 0
}

type VodDescribeVodDomainTrafficDataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainList        []string          `protobuf:"bytes,1,rep,name=DomainList,proto3" json:"DomainList,omitempty"`
	DomainInSpaceList []string          `protobuf:"bytes,2,rep,name=DomainInSpaceList,proto3" json:"DomainInSpaceList,omitempty"`
	StartTime         string            `protobuf:"bytes,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime           string            `protobuf:"bytes,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Aggregation       int32             `protobuf:"varint,5,opt,name=Aggregation,proto3" json:"Aggregation,omitempty"`
	TrafficType       string            `protobuf:"bytes,6,opt,name=TrafficType,proto3" json:"TrafficType,omitempty"`
	Area              string            `protobuf:"bytes,7,opt,name=Area,proto3" json:"Area,omitempty"`
	RegionList        []string          `protobuf:"bytes,8,rep,name=RegionList,proto3" json:"RegionList,omitempty"`
	TotalTraffic      float64           `protobuf:"fixed64,9,opt,name=TotalTraffic,proto3" json:"TotalTraffic,omitempty"`
	TrafficDataList   []*VodTrafficData `protobuf:"bytes,10,rep,name=TrafficDataList,proto3" json:"TrafficDataList,omitempty"`
}

func (x *VodDescribeVodDomainTrafficDataResult) Reset() {
	*x = VodDescribeVodDomainTrafficDataResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDescribeVodDomainTrafficDataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDescribeVodDomainTrafficDataResult) ProtoMessage() {}

func (x *VodDescribeVodDomainTrafficDataResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDescribeVodDomainTrafficDataResult.ProtoReflect.Descriptor instead.
func (*VodDescribeVodDomainTrafficDataResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{22}
}

func (x *VodDescribeVodDomainTrafficDataResult) GetDomainList() []string {
	if x != nil {
		return x.DomainList
	}
	return nil
}

func (x *VodDescribeVodDomainTrafficDataResult) GetDomainInSpaceList() []string {
	if x != nil {
		return x.DomainInSpaceList
	}
	return nil
}

func (x *VodDescribeVodDomainTrafficDataResult) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *VodDescribeVodDomainTrafficDataResult) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *VodDescribeVodDomainTrafficDataResult) GetAggregation() int32 {
	if x != nil {
		return x.Aggregation
	}
	return 0
}

func (x *VodDescribeVodDomainTrafficDataResult) GetTrafficType() string {
	if x != nil {
		return x.TrafficType
	}
	return ""
}

func (x *VodDescribeVodDomainTrafficDataResult) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *VodDescribeVodDomainTrafficDataResult) GetRegionList() []string {
	if x != nil {
		return x.RegionList
	}
	return nil
}

func (x *VodDescribeVodDomainTrafficDataResult) GetTotalTraffic() float64 {
	if x != nil {
		return x.TotalTraffic
	}
	return 0
}

func (x *VodDescribeVodDomainTrafficDataResult) GetTrafficDataList() []*VodTrafficData {
	if x != nil {
		return x.TrafficDataList
	}
	return nil
}

type VodDomainSourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceStationType        VodDomainSourceStationType        `protobuf:"varint,1,opt,name=SourceStationType,proto3,enum=Volcengine.Vod.Models.Business.VodDomainSourceStationType" json:"SourceStationType,omitempty"`                      //源站类型
	SourceStationAddressType VodDomainSourceStationAddressType `protobuf:"varint,2,opt,name=SourceStationAddressType,proto3,enum=Volcengine.Vod.Models.Business.VodDomainSourceStationAddressType" json:"SourceStationAddressType,omitempty"` //源站地址类型
	Origin                   string                            `protobuf:"bytes,3,opt,name=Origin,proto3" json:"Origin,omitempty"`                                                                                                            //回源地址
	Bucket                   *VodDomainOriginBucketInfo        `protobuf:"bytes,4,opt,name=Bucket,proto3" json:"Bucket,omitempty"`                                                                                                            //回源存储桶信息
}

func (x *VodDomainSourceInfo) Reset() {
	*x = VodDomainSourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDomainSourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDomainSourceInfo) ProtoMessage() {}

func (x *VodDomainSourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDomainSourceInfo.ProtoReflect.Descriptor instead.
func (*VodDomainSourceInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{23}
}

func (x *VodDomainSourceInfo) GetSourceStationType() VodDomainSourceStationType {
	if x != nil {
		return x.SourceStationType
	}
	return VodDomainSourceStationType_UndefinedVodDomainSourceStationType
}

func (x *VodDomainSourceInfo) GetSourceStationAddressType() VodDomainSourceStationAddressType {
	if x != nil {
		return x.SourceStationAddressType
	}
	return VodDomainSourceStationAddressType_UndefinedVodDomainSourceStationAddressType
}

func (x *VodDomainSourceInfo) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *VodDomainSourceInfo) GetBucket() *VodDomainOriginBucketInfo {
	if x != nil {
		return x.Bucket
	}
	return nil
}

type VodDomainOriginBucketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName       string `protobuf:"bytes,1,opt,name=BucketName,proto3" json:"BucketName,omitempty"`             //回源桶名称
	BucketSourceType string `protobuf:"bytes,2,opt,name=BucketSourceType,proto3" json:"BucketSourceType,omitempty"` //回源存储源类型，vod-点播默认存储， tos-挂载对象存储
	BucketRegion     string `protobuf:"bytes,3,opt,name=BucketRegion,proto3" json:"BucketRegion,omitempty"`         //回源桶区域
}

func (x *VodDomainOriginBucketInfo) Reset() {
	*x = VodDomainOriginBucketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDomainOriginBucketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDomainOriginBucketInfo) ProtoMessage() {}

func (x *VodDomainOriginBucketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDomainOriginBucketInfo.ProtoReflect.Descriptor instead.
func (*VodDomainOriginBucketInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{24}
}

func (x *VodDomainOriginBucketInfo) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *VodDomainOriginBucketInfo) GetBucketSourceType() string {
	if x != nil {
		return x.BucketSourceType
	}
	return ""
}

func (x *VodDomainOriginBucketInfo) GetBucketRegion() string {
	if x != nil {
		return x.BucketRegion
	}
	return ""
}

type VodSubmitBlockTasksResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID string `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"` //任务ID
}

func (x *VodSubmitBlockTasksResult) Reset() {
	*x = VodSubmitBlockTasksResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodSubmitBlockTasksResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodSubmitBlockTasksResult) ProtoMessage() {}

func (x *VodSubmitBlockTasksResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodSubmitBlockTasksResult.ProtoReflect.Descriptor instead.
func (*VodSubmitBlockTasksResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{25}
}

func (x *VodSubmitBlockTasksResult) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

type VodGetContentBlockTasksResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int64          `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`       //代表符合查询条件的任务总数。
	PageNum  int64          `protobuf:"varint,2,opt,name=PageNum,proto3" json:"PageNum,omitempty"`   //代表当前页码。 该值与请求正文中的 PageNum 值相同。
	PageSize int64          `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"` //代表每页的任务数量。
	Data     []*ContentTask `protobuf:"bytes,4,rep,name=Data,proto3" json:"Data,omitempty"`          //符合条件的任务结构体
}

func (x *VodGetContentBlockTasksResult) Reset() {
	*x = VodGetContentBlockTasksResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodGetContentBlockTasksResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodGetContentBlockTasksResult) ProtoMessage() {}

func (x *VodGetContentBlockTasksResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodGetContentBlockTasksResult.ProtoReflect.Descriptor instead.
func (*VodGetContentBlockTasksResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{26}
}

func (x *VodGetContentBlockTasksResult) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VodGetContentBlockTasksResult) GetPageNum() int64 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *VodGetContentBlockTasksResult) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *VodGetContentBlockTasksResult) GetData() []*ContentTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type ContentTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"` //代表一个内容 URL。
	// 代表一个内容 URL 的状态。该参数的可用值如下：
	// complete：已完成。
	// running：执行中。
	// failed：执行失败。
	Status string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	// 代表一个任务类型。该参数的可用值如下：：
	// block_url：封禁任务。
	// unblock_url：解封任务。
	TaskType   string `protobuf:"bytes,3,opt,name=TaskType,proto3" json:"TaskType,omitempty"`
	CreateTime int64  `protobuf:"varint,4,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"` //代表一个任务的提交时间。时间格式是 Unix 时间戳。
	TaskID     string `protobuf:"bytes,5,opt,name=TaskID,proto3" json:"TaskID,omitempty"`          //代表一个任务 ID。
}

func (x *ContentTask) Reset() {
	*x = ContentTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentTask) ProtoMessage() {}

func (x *ContentTask) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentTask.ProtoReflect.Descriptor instead.
func (*ContentTask) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{27}
}

func (x *ContentTask) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ContentTask) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ContentTask) GetTaskType() string {
	if x != nil {
		return x.TaskType
	}
	return ""
}

func (x *ContentTask) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ContentTask) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

// IPV6配置模块
type IPv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch bool `protobuf:"varint,1,opt,name=Switch,proto3" json:"Switch,omitempty"` // 指定是否启用 IPv6 配置。该参数有以下取值： -
}

func (x *IPv6) Reset() {
	*x = IPv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv6) ProtoMessage() {}

func (x *IPv6) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv6.ProtoReflect.Descriptor instead.
func (*IPv6) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{28}
}

func (x *IPv6) GetSwitch() bool {
	if x != nil {
		return x.Switch
	}
	return false
}

// 表示一个源站配置
type OriginLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`           // 源站地址
	HttpPort     string `protobuf:"bytes,2,opt,name=HttpPort,proto3" json:"HttpPort,omitempty"`         // HTTP协议端口
	HttpsPort    string `protobuf:"bytes,3,opt,name=HttpsPort,proto3" json:"HttpsPort,omitempty"`       // HTTPS协议端口
	InstanceType string `protobuf:"bytes,4,opt,name=InstanceType,proto3" json:"InstanceType,omitempty"` // 源站的类型 ip/domain
	OriginHost   string `protobuf:"bytes,5,opt,name=OriginHost,proto3" json:"OriginHost,omitempty"`     // 回源请求访问的站点域名
	OriginType   string `protobuf:"bytes,6,opt,name=OriginType,proto3" json:"OriginType,omitempty"`     // 源站的类别 primary/backup
	Weight       string `protobuf:"bytes,7,opt,name=Weight,proto3" json:"Weight,omitempty"`             // 源站的权重，取值范围是 1-100
}

func (x *OriginLine) Reset() {
	*x = OriginLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginLine) ProtoMessage() {}

func (x *OriginLine) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginLine.ProtoReflect.Descriptor instead.
func (*OriginLine) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{29}
}

func (x *OriginLine) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OriginLine) GetHttpPort() string {
	if x != nil {
		return x.HttpPort
	}
	return ""
}

func (x *OriginLine) GetHttpsPort() string {
	if x != nil {
		return x.HttpsPort
	}
	return ""
}

func (x *OriginLine) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *OriginLine) GetOriginHost() string {
	if x != nil {
		return x.OriginHost
	}
	return ""
}

func (x *OriginLine) GetOriginType() string {
	if x != nil {
		return x.OriginType
	}
	return ""
}

func (x *OriginLine) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

// 表示一个源站配置列表
type OriginAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginLines []*OriginLine `protobuf:"bytes,1,rep,name=OriginLines,proto3" json:"OriginLines,omitempty"` // 一个源站配置列表。每个配置可以包含一个或者多个源站。
}

func (x *OriginAction) Reset() {
	*x = OriginAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginAction) ProtoMessage() {}

func (x *OriginAction) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginAction.ProtoReflect.Descriptor instead.
func (*OriginAction) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{30}
}

func (x *OriginAction) GetOriginLines() []*OriginLine {
	if x != nil {
		return x.OriginLines
	}
	return nil
}

// 表示源站配置
type CdnOriginRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginAction *OriginAction `protobuf:"bytes,1,opt,name=OriginAction,proto3" json:"OriginAction,omitempty"` // 源站配置
}

func (x *CdnOriginRule) Reset() {
	*x = CdnOriginRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdnOriginRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdnOriginRule) ProtoMessage() {}

func (x *CdnOriginRule) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdnOriginRule.ProtoReflect.Descriptor instead.
func (*CdnOriginRule) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{31}
}

func (x *CdnOriginRule) GetOriginAction() *OriginAction {
	if x != nil {
		return x.OriginAction
	}
	return nil
}

type VodResponseHeaderInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action              string `protobuf:"bytes,1,opt,name=Action,proto3" json:"Action,omitempty"`                            // 指定对响应头的操作
	Key                 string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`                                  // 指定一个头部的名称
	ValueType           string `protobuf:"bytes,3,opt,name=ValueType,proto3" json:"ValueType,omitempty"`                      // 指定 Key 的取值类型
	AccessOriginControl bool   `protobuf:"varint,4,opt,name=AccessOriginControl,proto3" json:"AccessOriginControl,omitempty"` // 表示在内容分发网络响应用户请求时，是否校验请求头中的 Origin 字段
	Value               string `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"`                              // 表示 Key 的值
}

func (x *VodResponseHeaderInstance) Reset() {
	*x = VodResponseHeaderInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodResponseHeaderInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodResponseHeaderInstance) ProtoMessage() {}

func (x *VodResponseHeaderInstance) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodResponseHeaderInstance.ProtoReflect.Descriptor instead.
func (*VodResponseHeaderInstance) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{32}
}

func (x *VodResponseHeaderInstance) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *VodResponseHeaderInstance) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *VodResponseHeaderInstance) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

func (x *VodResponseHeaderInstance) GetAccessOriginControl() bool {
	if x != nil {
		return x.AccessOriginControl
	}
	return false
}

func (x *VodResponseHeaderInstance) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type VodResponseHeaderAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeaderInstances []*VodResponseHeaderInstance `protobuf:"bytes,1,rep,name=ResponseHeaderInstances,proto3" json:"ResponseHeaderInstances,omitempty"` // 表示一个响应头的配置规则列表。每个规则都包含一个头部的相关操作设置。您最多可以添加
}

func (x *VodResponseHeaderAction) Reset() {
	*x = VodResponseHeaderAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodResponseHeaderAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodResponseHeaderAction) ProtoMessage() {}

func (x *VodResponseHeaderAction) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodResponseHeaderAction.ProtoReflect.Descriptor instead.
func (*VodResponseHeaderAction) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{33}
}

func (x *VodResponseHeaderAction) GetResponseHeaderInstances() []*VodResponseHeaderInstance {
	if x != nil {
		return x.ResponseHeaderInstances
	}
	return nil
}

type VodResponseHeaderRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeaderAction *VodResponseHeaderAction `protobuf:"bytes,1,opt,name=ResponseHeaderAction,proto3" json:"ResponseHeaderAction,omitempty"` // 表示内容分发网络在响应用户请求的时候，对响应头的操作
}

func (x *VodResponseHeaderRule) Reset() {
	*x = VodResponseHeaderRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodResponseHeaderRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodResponseHeaderRule) ProtoMessage() {}

func (x *VodResponseHeaderRule) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodResponseHeaderRule.ProtoReflect.Descriptor instead.
func (*VodResponseHeaderRule) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{34}
}

func (x *VodResponseHeaderRule) GetResponseHeaderAction() *VodResponseHeaderAction {
	if x != nil {
		return x.ResponseHeaderAction
	}
	return nil
}

// HTTP响应头设置
type VodResponseHeaderControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeader []*VodResponseHeaderRule `protobuf:"bytes,1,rep,name=ResponseHeader,proto3" json:"ResponseHeader,omitempty"` // 表示 HTTP 响应头配置模块。该功能默认为禁用
}

func (x *VodResponseHeaderControl) Reset() {
	*x = VodResponseHeaderControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodResponseHeaderControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodResponseHeaderControl) ProtoMessage() {}

func (x *VodResponseHeaderControl) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodResponseHeaderControl.ProtoReflect.Descriptor instead.
func (*VodResponseHeaderControl) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{35}
}

func (x *VodResponseHeaderControl) GetResponseHeader() []*VodResponseHeaderRule {
	if x != nil {
		return x.ResponseHeader
	}
	return nil
}

type VodDomainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseHeaderControl *VodResponseHeaderControl `protobuf:"bytes,1,opt,name=ResponseHeaderControl,proto3" json:"ResponseHeaderControl,omitempty"` // HTTP响应头设置
}

func (x *VodDomainConfig) Reset() {
	*x = VodDomainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDomainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDomainConfig) ProtoMessage() {}

func (x *VodDomainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDomainConfig.ProtoReflect.Descriptor instead.
func (*VodDomainConfig) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{36}
}

func (x *VodDomainConfig) GetResponseHeaderControl() *VodResponseHeaderControl {
	if x != nil {
		return x.ResponseHeaderControl
	}
	return nil
}

type VodDomainBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`             // 表示该加速域名。
	Cname        string `protobuf:"bytes,2,opt,name=Cname,proto3" json:"Cname,omitempty"`               // 表示内容分发网络为该加速域名分配的 CNAME。
	ConfigStatus string `protobuf:"bytes,3,opt,name=ConfigStatus,proto3" json:"ConfigStatus,omitempty"` // 表示该加速域名的配置状态
	CreateTime   string `protobuf:"bytes,4,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`     // 创建时间。UTC + 8 时区。
	LockStatus   string `protobuf:"bytes,5,opt,name=LockStatus,proto3" json:"LockStatus,omitempty"`     // 表示域名是否被锁定。
}

func (x *VodDomainBasicInfo) Reset() {
	*x = VodDomainBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDomainBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDomainBasicInfo) ProtoMessage() {}

func (x *VodDomainBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDomainBasicInfo.ProtoReflect.Descriptor instead.
func (*VodDomainBasicInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{37}
}

func (x *VodDomainBasicInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodDomainBasicInfo) GetCname() string {
	if x != nil {
		return x.Cname
	}
	return ""
}

func (x *VodDomainBasicInfo) GetConfigStatus() string {
	if x != nil {
		return x.ConfigStatus
	}
	return ""
}

func (x *VodDomainBasicInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *VodDomainBasicInfo) GetLockStatus() string {
	if x != nil {
		return x.LockStatus
	}
	return ""
}

type VodDescribeDomainConfigResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName string              `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"` // 点播空间名称
	Domain    *VodDomainBasicInfo `protobuf:"bytes,2,opt,name=Domain,proto3" json:"Domain,omitempty"`       // 域名基础信息。
	Config    *VodDomainConfig    `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`       // 域名配置详情。
}

func (x *VodDescribeDomainConfigResult) Reset() {
	*x = VodDescribeDomainConfigResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodDescribeDomainConfigResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodDescribeDomainConfigResult) ProtoMessage() {}

func (x *VodDescribeDomainConfigResult) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodDescribeDomainConfigResult.ProtoReflect.Descriptor instead.
func (*VodDescribeDomainConfigResult) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{38}
}

func (x *VodDescribeDomainConfigResult) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodDescribeDomainConfigResult) GetDomain() *VodDomainBasicInfo {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *VodDescribeDomainConfigResult) GetConfig() *VodDomainConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type VodPCDNDomainConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceName        string                      `protobuf:"bytes,1,opt,name=SpaceName,proto3" json:"SpaceName,omitempty"`               // 空间名称
	PCDNInstanceInfo *VodPCDNDomainInstanceInfos `protobuf:"bytes,2,opt,name=PCDNInstanceInfo,proto3" json:"PCDNInstanceInfo,omitempty"` // PCDN分发加速配置
	Total            int64                       `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`                      //符合要求的域名总数
	Offset           int64                       `protobuf:"varint,4,opt,name=Offset,proto3" json:"Offset,omitempty"`                    //已显示多少条域名
}

func (x *VodPCDNDomainConfigInfo) Reset() {
	*x = VodPCDNDomainConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodPCDNDomainConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodPCDNDomainConfigInfo) ProtoMessage() {}

func (x *VodPCDNDomainConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodPCDNDomainConfigInfo.ProtoReflect.Descriptor instead.
func (*VodPCDNDomainConfigInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{39}
}

func (x *VodPCDNDomainConfigInfo) GetSpaceName() string {
	if x != nil {
		return x.SpaceName
	}
	return ""
}

func (x *VodPCDNDomainConfigInfo) GetPCDNInstanceInfo() *VodPCDNDomainInstanceInfos {
	if x != nil {
		return x.PCDNInstanceInfo
	}
	return nil
}

func (x *VodPCDNDomainConfigInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *VodPCDNDomainConfigInfo) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type VodPCDNDomainInstanceInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domains []*VodPCDNDomainInfo `protobuf:"bytes,1,rep,name=Domains,proto3" json:"Domains,omitempty"` // PCDN实例
}

func (x *VodPCDNDomainInstanceInfos) Reset() {
	*x = VodPCDNDomainInstanceInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodPCDNDomainInstanceInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodPCDNDomainInstanceInfos) ProtoMessage() {}

func (x *VodPCDNDomainInstanceInfos) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodPCDNDomainInstanceInfos.ProtoReflect.Descriptor instead.
func (*VodPCDNDomainInstanceInfos) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{40}
}

func (x *VodPCDNDomainInstanceInfos) GetDomains() []*VodPCDNDomainInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

type VodPCDNDomainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain     string `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`         //域名
	Status     string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`         //运行状态，enable：运行中，disable：停用。
	CreateTime string `protobuf:"bytes,3,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"` //创建时间
	UpdateTime string `protobuf:"bytes,4,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"` //更新时间
}

func (x *VodPCDNDomainInfo) Reset() {
	*x = VodPCDNDomainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VodPCDNDomainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VodPCDNDomainInfo) ProtoMessage() {}

func (x *VodPCDNDomainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_volcengine_vod_business_vod_cdn_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VodPCDNDomainInfo.ProtoReflect.Descriptor instead.
func (*VodPCDNDomainInfo) Descriptor() ([]byte, []int) {
	return file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP(), []int{41}
}

func (x *VodPCDNDomainInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VodPCDNDomainInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VodPCDNDomainInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *VodPCDNDomainInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

var File_volcengine_vod_business_vod_cdn_proto protoreflect.FileDescriptor

var file_volcengine_vod_business_vod_cdn_proto_rawDesc = []byte{
	0x0a, 0x25, 0x76, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x6f, 0x64,
	0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x6f, 0x64, 0x5f, 0x63, 0x64,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x28, 0x76, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2f, 0x76, 0x6f, 0x64, 0x2f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2f, 0x76, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd9, 0x02, 0x0a, 0x13, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x64, 0x0a, 0x11, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x11,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xd4, 0x01,
	0x0a, 0x16, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x5b, 0x0a, 0x0d, 0x42, 0x79, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x42, 0x79, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56,
	0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x15, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a,
	0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0xdd, 0x03, 0x0a, 0x0e, 0x56, 0x6f, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x43, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x07, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x64, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x64,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x18, 0x56, 0x6f, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x1e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x16,
	0x56, 0x6f, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x64, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xca,
	0x01, 0x0a, 0x0e, 0x56, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x10,
	0x56, 0x6f, 0x64, 0x43, 0x64, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x56,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x56,
	0x6f, 0x64, 0x43, 0x64, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x7f, 0x0a, 0x13, 0x56,
	0x6f, 0x64, 0x43, 0x64, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x4c, 0x6f,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64,
	0x43, 0x64, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x19,
	0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x64, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x4c, 0x6f, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x43, 0x64, 0x6e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x4c, 0x6f,
	0x67, 0x73, 0x22, 0x51, 0x0a, 0x19, 0x56, 0x6f, 0x64, 0x43, 0x64, 0x6e, 0x54, 0x6f, 0x70, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x72, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x50,
	0x76, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x75, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x46, 0x6c, 0x75, 0x78, 0x22, 0x75, 0x0a, 0x1c, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x64, 0x6e, 0x54, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x08, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x43, 0x64, 0x6e, 0x54,
	0x6f, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x72, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x55, 0x72, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x48, 0x0a, 0x16,
	0x56, 0x6f, 0x64, 0x43, 0x64, 0x6e, 0x54, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x71, 0x0a, 0x19, 0x56, 0x6f, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x64, 0x6e, 0x54, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x43, 0x64, 0x6e, 0x54, 0x6f,
	0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x44, 0x0a, 0x10, 0x56, 0x6f, 0x64,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22,
	0xbb, 0x04, 0x0a, 0x27, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x56,
	0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x65,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x65, 0x61, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x50, 0x65, 0x61, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x65, 0x61, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x50, 0x65, 0x61, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x65, 0x61, 0x6b, 0x39, 0x35, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x50, 0x65, 0x61, 0x6b,
	0x39, 0x35, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x50,
	0x65, 0x61, 0x6b, 0x39, 0x35, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x65, 0x61, 0x6b, 0x39, 0x35,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a,
	0x11, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf0, 0x01,
	0x0a, 0x14, 0x56, 0x6f, 0x64, 0x43, 0x64, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x56, 0x6f, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x73, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x49, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x22, 0x9c, 0x01, 0x0a, 0x1c, 0x56, 0x6f, 0x64, 0x43, 0x64, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4a, 0x0a, 0x05, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f,
	0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x2e, 0x56, 0x6f, 0x64, 0x43, 0x64, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x4e, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x4e, 0x6f, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22,
	0x62, 0x0a, 0x0c, 0x56, 0x6f, 0x64, 0x43, 0x64, 0x6e, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x43, 0x64, 0x6e, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x43, 0x64, 0x6e, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x49, 0x73, 0x70, 0x22, 0x5d, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56,
	0x6f, 0x64, 0x43, 0x64, 0x6e, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0x3e, 0x0a, 0x0e, 0x56, 0x6f, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x22, 0xa3, 0x03, 0x0a, 0x25, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x58,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe9, 0x02, 0x0a, 0x13, 0x56, 0x6f, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x68, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7d, 0x0a, 0x18, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x56,
	0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f,
	0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x18, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x51, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x19, 0x56, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0xac, 0x01, 0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x22, 0x1e, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x36, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x48, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x74, 0x74,
	0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x48, 0x74,
	0x74, 0x70, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x5c, 0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x22, 0x61, 0x0a, 0x0d, 0x43, 0x64, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x19, 0x56, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73,
	0x0a, 0x17, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x2e, 0x56, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x56, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x6b, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x18, 0x56, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x5d, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x56, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x15, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x56, 0x6f,
	0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x47,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e,
	0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xcd, 0x01, 0x0a, 0x17, 0x56, 0x6f, 0x64, 0x50,
	0x43, 0x44, 0x4e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x66, 0x0a, 0x10, 0x50, 0x43, 0x44, 0x4e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x56, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64,
	0x50, 0x43, 0x44, 0x4e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x10, 0x50, 0x43, 0x44, 0x4e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x69, 0x0a, 0x1a, 0x56, 0x6f, 0x64, 0x50, 0x43,
	0x44, 0x4e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x56, 0x6f, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x56, 0x6f, 0x64, 0x50, 0x43, 0x44, 0x4e, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x56, 0x6f, 0x64, 0x50, 0x43, 0x44, 0x4e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x92, 0x01, 0x0a, 0x1a, 0x56, 0x6f, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x56, 0x6f, 0x64, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x2a, 0xa9, 0x01,
	0x0a, 0x21, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x6f, 0x64,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01,
	0x12, 0x27, 0x0a, 0x23, 0x49, 0x50, 0x56, 0x6f, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x42, 0xca, 0x01, 0x0a, 0x29, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x6f, 0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x6f, 0x64, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x06, 0x56, 0x6f, 0x64, 0x43, 0x64, 0x6e, 0x50,
	0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6f,
	0x6c, 0x63, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x6f, 0x6c, 0x63, 0x2d, 0x73, 0x64,
	0x6b, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x6f, 0x64, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0xa0, 0x01, 0x01, 0xd8, 0x01, 0x01, 0xc2, 0x02, 0x00, 0xca, 0x02, 0x20,
	0x56, 0x6f, 0x6c, 0x63, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x6f, 0x64,
	0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0xe2, 0x02, 0x23, 0x56, 0x6f, 0x6c, 0x63, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c,
	0x56, 0x6f, 0x64, 0x5c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_volcengine_vod_business_vod_cdn_proto_rawDescOnce sync.Once
	file_volcengine_vod_business_vod_cdn_proto_rawDescData = file_volcengine_vod_business_vod_cdn_proto_rawDesc
)

func file_volcengine_vod_business_vod_cdn_proto_rawDescGZIP() []byte {
	file_volcengine_vod_business_vod_cdn_proto_rawDescOnce.Do(func() {
		file_volcengine_vod_business_vod_cdn_proto_rawDescData = protoimpl.X.CompressGZIP(file_volcengine_vod_business_vod_cdn_proto_rawDescData)
	})
	return file_volcengine_vod_business_vod_cdn_proto_rawDescData
}

var file_volcengine_vod_business_vod_cdn_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_volcengine_vod_business_vod_cdn_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_volcengine_vod_business_vod_cdn_proto_goTypes = []interface{}{
	(VodDomainSourceStationType)(0),                 // 0: Volcengine.Vod.Models.Business.VodDomainSourceStationType
	(VodDomainSourceStationAddressType)(0),          // 1: Volcengine.Vod.Models.Business.VodDomainSourceStationAddressType
	(*VodDomainConfigInfo)(nil),                     // 2: Volcengine.Vod.Models.Business.VodDomainConfigInfo
	(*VodDomainInstanceInfos)(nil),                  // 3: Volcengine.Vod.Models.Business.VodDomainInstanceInfos
	(*VodDomainInstanceInfo)(nil),                   // 4: Volcengine.Vod.Models.Business.VodDomainInstanceInfo
	(*VodDomainoInfo)(nil),                          // 5: Volcengine.Vod.Models.Business.VodDomainoInfo
	(*VodDomainCertificateInfo)(nil),                // 6: Volcengine.Vod.Models.Business.VodDomainCertificateInfo
	(*VodCreateCdnTaskResult)(nil),                  // 7: Volcengine.Vod.Models.Business.VodCreateCdnTaskResult
	(*VodContentInfo)(nil),                          // 8: Volcengine.Vod.Models.Business.VodContentInfo
	(*VodCdnTaskResult)(nil),                        // 9: Volcengine.Vod.Models.Business.VodCdnTaskResult
	(*VodCdnAccessLogElement)(nil),                  // 10: Volcengine.Vod.Models.Business.VodCdnAccessLogElement
	(*VodCdnAccessLogInfo)(nil),                     // 11: Volcengine.Vod.Models.Business.VodCdnAccessLogInfo
	(*VodListCdnAccessLogResult)(nil),               // 12: Volcengine.Vod.Models.Business.VodListCdnAccessLogResult
	(*VodCdnTopAccessUrlElement)(nil),               // 13: Volcengine.Vod.Models.Business.VodCdnTopAccessUrlElement
	(*VodListCdnTopAccessUrlResult)(nil),            // 14: Volcengine.Vod.Models.Business.VodListCdnTopAccessUrlResult
	(*VodCdnTopAccessElement)(nil),                  // 15: Volcengine.Vod.Models.Business.VodCdnTopAccessElement
	(*VodListCdnTopAccessResult)(nil),               // 16: Volcengine.Vod.Models.Business.VodListCdnTopAccessResult
	(*VodBandwidthData)(nil),                        // 17: Volcengine.Vod.Models.Business.VodBandwidthData
	(*VodDescribeVodDomainBandwidthDataResult)(nil), // 18: Volcengine.Vod.Models.Business.VodDescribeVodDomainBandwidthDataResult
	(*VodCdnStatisticsData)(nil),                    // 19: Volcengine.Vod.Models.Business.VodCdnStatisticsData
	(*VodCdnStatisticsCommonResult)(nil),            // 20: Volcengine.Vod.Models.Business.VodCdnStatisticsCommonResult
	(*VodCdnIpInfo)(nil),                            // 21: Volcengine.Vod.Models.Business.VodCdnIpInfo
	(*VodDescribeIpInfoResult)(nil),                 // 22: Volcengine.Vod.Models.Business.VodDescribeIpInfoResult
	(*VodTrafficData)(nil),                          // 23: Volcengine.Vod.Models.Business.VodTrafficData
	(*VodDescribeVodDomainTrafficDataResult)(nil),   // 24: Volcengine.Vod.Models.Business.VodDescribeVodDomainTrafficDataResult
	(*VodDomainSourceInfo)(nil),                     // 25: Volcengine.Vod.Models.Business.VodDomainSourceInfo
	(*VodDomainOriginBucketInfo)(nil),               // 26: Volcengine.Vod.Models.Business.VodDomainOriginBucketInfo
	(*VodSubmitBlockTasksResult)(nil),               // 27: Volcengine.Vod.Models.Business.VodSubmitBlockTasksResult
	(*VodGetContentBlockTasksResult)(nil),           // 28: Volcengine.Vod.Models.Business.VodGetContentBlockTasksResult
	(*ContentTask)(nil),                             // 29: Volcengine.Vod.Models.Business.ContentTask
	(*IPv6)(nil),                                    // 30: Volcengine.Vod.Models.Business.IPv6
	(*OriginLine)(nil),                              // 31: Volcengine.Vod.Models.Business.OriginLine
	(*OriginAction)(nil),                            // 32: Volcengine.Vod.Models.Business.OriginAction
	(*CdnOriginRule)(nil),                           // 33: Volcengine.Vod.Models.Business.CdnOriginRule
	(*VodResponseHeaderInstance)(nil),               // 34: Volcengine.Vod.Models.Business.VodResponseHeaderInstance
	(*VodResponseHeaderAction)(nil),                 // 35: Volcengine.Vod.Models.Business.VodResponseHeaderAction
	(*VodResponseHeaderRule)(nil),                   // 36: Volcengine.Vod.Models.Business.VodResponseHeaderRule
	(*VodResponseHeaderControl)(nil),                // 37: Volcengine.Vod.Models.Business.VodResponseHeaderControl
	(*VodDomainConfig)(nil),                         // 38: Volcengine.Vod.Models.Business.VodDomainConfig
	(*VodDomainBasicInfo)(nil),                      // 39: Volcengine.Vod.Models.Business.VodDomainBasicInfo
	(*VodDescribeDomainConfigResult)(nil),           // 40: Volcengine.Vod.Models.Business.VodDescribeDomainConfigResult
	(*VodPCDNDomainConfigInfo)(nil),                 // 41: Volcengine.Vod.Models.Business.VodPCDNDomainConfigInfo
	(*VodPCDNDomainInstanceInfos)(nil),              // 42: Volcengine.Vod.Models.Business.VodPCDNDomainInstanceInfos
	(*VodPCDNDomainInfo)(nil),                       // 43: Volcengine.Vod.Models.Business.VodPCDNDomainInfo
	(*VodPoint)(nil),                                // 44: Volcengine.Vod.Models.Business.VodPoint
}
var file_volcengine_vod_business_vod_cdn_proto_depIdxs = []int32{
	3,  // 0: Volcengine.Vod.Models.Business.VodDomainConfigInfo.PlayInstanceInfo:type_name -> Volcengine.Vod.Models.Business.VodDomainInstanceInfos
	3,  // 1: Volcengine.Vod.Models.Business.VodDomainConfigInfo.ImageInstanceInfo:type_name -> Volcengine.Vod.Models.Business.VodDomainInstanceInfos
	4,  // 2: Volcengine.Vod.Models.Business.VodDomainInstanceInfos.ByteInstances:type_name -> Volcengine.Vod.Models.Business.VodDomainInstanceInfo
	4,  // 3: Volcengine.Vod.Models.Business.VodDomainInstanceInfos.OtherInstances:type_name -> Volcengine.Vod.Models.Business.VodDomainInstanceInfo
	5,  // 4: Volcengine.Vod.Models.Business.VodDomainInstanceInfo.Domains:type_name -> Volcengine.Vod.Models.Business.VodDomainoInfo
	6,  // 5: Volcengine.Vod.Models.Business.VodDomainoInfo.Certificate:type_name -> Volcengine.Vod.Models.Business.VodDomainCertificateInfo
	25, // 6: Volcengine.Vod.Models.Business.VodDomainoInfo.Sources:type_name -> Volcengine.Vod.Models.Business.VodDomainSourceInfo
	8,  // 7: Volcengine.Vod.Models.Business.VodCdnTaskResult.ContentInfos:type_name -> Volcengine.Vod.Models.Business.VodContentInfo
	10, // 8: Volcengine.Vod.Models.Business.VodCdnAccessLogInfo.LogList:type_name -> Volcengine.Vod.Models.Business.VodCdnAccessLogElement
	11, // 9: Volcengine.Vod.Models.Business.VodListCdnAccessLogResult.Logs:type_name -> Volcengine.Vod.Models.Business.VodCdnAccessLogInfo
	13, // 10: Volcengine.Vod.Models.Business.VodListCdnTopAccessUrlResult.UrlInfos:type_name -> Volcengine.Vod.Models.Business.VodCdnTopAccessUrlElement
	15, // 11: Volcengine.Vod.Models.Business.VodListCdnTopAccessResult.ItemInfos:type_name -> Volcengine.Vod.Models.Business.VodCdnTopAccessElement
	17, // 12: Volcengine.Vod.Models.Business.VodDescribeVodDomainBandwidthDataResult.BandwidthDataList:type_name -> Volcengine.Vod.Models.Business.VodBandwidthData
	44, // 13: Volcengine.Vod.Models.Business.VodCdnStatisticsData.Points:type_name -> Volcengine.Vod.Models.Business.VodPoint
	19, // 14: Volcengine.Vod.Models.Business.VodCdnStatisticsCommonResult.Datas:type_name -> Volcengine.Vod.Models.Business.VodCdnStatisticsData
	21, // 15: Volcengine.Vod.Models.Business.VodDescribeIpInfoResult.Infos:type_name -> Volcengine.Vod.Models.Business.VodCdnIpInfo
	23, // 16: Volcengine.Vod.Models.Business.VodDescribeVodDomainTrafficDataResult.TrafficDataList:type_name -> Volcengine.Vod.Models.Business.VodTrafficData
	0,  // 17: Volcengine.Vod.Models.Business.VodDomainSourceInfo.SourceStationType:type_name -> Volcengine.Vod.Models.Business.VodDomainSourceStationType
	1,  // 18: Volcengine.Vod.Models.Business.VodDomainSourceInfo.SourceStationAddressType:type_name -> Volcengine.Vod.Models.Business.VodDomainSourceStationAddressType
	26, // 19: Volcengine.Vod.Models.Business.VodDomainSourceInfo.Bucket:type_name -> Volcengine.Vod.Models.Business.VodDomainOriginBucketInfo
	29, // 20: Volcengine.Vod.Models.Business.VodGetContentBlockTasksResult.Data:type_name -> Volcengine.Vod.Models.Business.ContentTask
	31, // 21: Volcengine.Vod.Models.Business.OriginAction.OriginLines:type_name -> Volcengine.Vod.Models.Business.OriginLine
	32, // 22: Volcengine.Vod.Models.Business.CdnOriginRule.OriginAction:type_name -> Volcengine.Vod.Models.Business.OriginAction
	34, // 23: Volcengine.Vod.Models.Business.VodResponseHeaderAction.ResponseHeaderInstances:type_name -> Volcengine.Vod.Models.Business.VodResponseHeaderInstance
	35, // 24: Volcengine.Vod.Models.Business.VodResponseHeaderRule.ResponseHeaderAction:type_name -> Volcengine.Vod.Models.Business.VodResponseHeaderAction
	36, // 25: Volcengine.Vod.Models.Business.VodResponseHeaderControl.ResponseHeader:type_name -> Volcengine.Vod.Models.Business.VodResponseHeaderRule
	37, // 26: Volcengine.Vod.Models.Business.VodDomainConfig.ResponseHeaderControl:type_name -> Volcengine.Vod.Models.Business.VodResponseHeaderControl
	39, // 27: Volcengine.Vod.Models.Business.VodDescribeDomainConfigResult.Domain:type_name -> Volcengine.Vod.Models.Business.VodDomainBasicInfo
	38, // 28: Volcengine.Vod.Models.Business.VodDescribeDomainConfigResult.Config:type_name -> Volcengine.Vod.Models.Business.VodDomainConfig
	42, // 29: Volcengine.Vod.Models.Business.VodPCDNDomainConfigInfo.PCDNInstanceInfo:type_name -> Volcengine.Vod.Models.Business.VodPCDNDomainInstanceInfos
	43, // 30: Volcengine.Vod.Models.Business.VodPCDNDomainInstanceInfos.Domains:type_name -> Volcengine.Vod.Models.Business.VodPCDNDomainInfo
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_volcengine_vod_business_vod_cdn_proto_init() }
func file_volcengine_vod_business_vod_cdn_proto_init() {
	if File_volcengine_vod_business_vod_cdn_proto != nil {
		return
	}
	file_volcengine_vod_business_vod_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDomainConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDomainInstanceInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDomainInstanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDomainoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDomainCertificateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCreateCdnTaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodContentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCdnTaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCdnAccessLogElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCdnAccessLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnAccessLogResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCdnTopAccessUrlElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnTopAccessUrlResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCdnTopAccessElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodListCdnTopAccessResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodBandwidthData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDescribeVodDomainBandwidthDataResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCdnStatisticsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCdnStatisticsCommonResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodCdnIpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDescribeIpInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodTrafficData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDescribeVodDomainTrafficDataResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDomainSourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDomainOriginBucketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodSubmitBlockTasksResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodGetContentBlockTasksResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdnOriginRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodResponseHeaderInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodResponseHeaderAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodResponseHeaderRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodResponseHeaderControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDomainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDomainBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodDescribeDomainConfigResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodPCDNDomainConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodPCDNDomainInstanceInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volcengine_vod_business_vod_cdn_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VodPCDNDomainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_volcengine_vod_business_vod_cdn_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_volcengine_vod_business_vod_cdn_proto_goTypes,
		DependencyIndexes: file_volcengine_vod_business_vod_cdn_proto_depIdxs,
		EnumInfos:         file_volcengine_vod_business_vod_cdn_proto_enumTypes,
		MessageInfos:      file_volcengine_vod_business_vod_cdn_proto_msgTypes,
	}.Build()
	File_volcengine_vod_business_vod_cdn_proto = out.File
	file_volcengine_vod_business_vod_cdn_proto_rawDesc = nil
	file_volcengine_vod_business_vod_cdn_proto_goTypes = nil
	file_volcengine_vod_business_vod_cdn_proto_depIdxs = nil
}
